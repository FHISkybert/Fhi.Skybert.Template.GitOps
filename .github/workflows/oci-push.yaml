name: Push Helm Template as OCI

on:
  workflow_dispatch:
  # Uncomment this to enable the workflow
  # push:
  #   branches:
  #   - main

env:
  APP_NAME: <APPLICATION_NAME>
  ACR_NAME: crfhiskybert

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create local bin directory
      run: |
        mkdir -p $HOME/.local/bin

    - name: Install Kustomize
      run: |
        curl -sLO https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.7.1/kustomize_v5.7.1_linux_amd64.tar.gz
        echo "ea375e7372f9aa029129d4b2d16c66b7750b7f1213c4f66f910d981c895818d8  kustomize_v5.7.1_linux_amd64.tar.gz" | sha256sum -c
        tar -xzf kustomize_v5.7.1_linux_amd64.tar.gz -C $HOME/.local/bin
        rm kustomize_v5.7.1_linux_amd64.tar.gz

    - name: Install Flux
      run: |
        curl -sLO https://github.com/fluxcd/flux2/releases/download/v2.5.0/flux_2.5.0_linux_amd64.tar.gz
        echo "6d9ee65232269a81c765604d88d7afe347330aceb1c77f0bc45a2d1f93802fce  flux_2.5.0_linux_amd64.tar.gz" | sha256sum -c
        tar -xzf flux_2.5.0_linux_amd64.tar.gz -C $HOME/.local/bin
        rm flux_2.5.0_linux_amd64.tar.gz

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.9.2

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Docker Login to ACR
      run: az acr login --name ${{ env.ACR_NAME }} --subscription ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Discover environments
      id: discover-envs
      run: |
        # Find all non-hidden directories in the root (omit "base" for kustomize)
        ENVS=$(find . -maxdepth 1 -type d -not -path "./.*" -not -path "." -not -path "./base*" | sed 's|^\./||' | tr '\n' ' ')
        echo "environments=$ENVS" >> $GITHUB_OUTPUT
        echo "Found environments: $ENVS"

    - name: Create rendered directory
      run: |
        mkdir -p rendered

    - name: Build, sign, and push for each environment
      run: |
        ENVS="${{ steps.discover-envs.outputs.environments }}"
        APP_NAME="${{ env.APP_NAME }}"
        ACR_NAME="${{ env.ACR_NAME }}"
        
        digests=""
        for env in $ENVS; do
          echo "Processing environment: $env"
          
          # Create rendered directory for this environment
          mkdir -p rendered/$env
          
          # Detect configuration type
          CONFIG_TYPE=""
          
          # Check for Helm chart
          if [ -f "$env/Chart.yaml" ]; then
            CONFIG_TYPE="helm"
            echo "Detected Helm configuration for $env"
          # Check for Kustomize
          elif [ -f "$env/kustomization.yaml" ]; then
            CONFIG_TYPE="kustomize"
            echo "Detected Kustomize configuration for $env"
          else
            CONFIG_TYPE="plain"
            echo "Defaulting to plain YAML configuration for $env"
          fi
          
          # Process based on configuration type
          case $CONFIG_TYPE in
            "helm")
              echo "Processing Helm chart for $env..."
              cd $env
              helm dependency update
              helm template ${APP_NAME} . > ../rendered/$env/all_${env}.yaml
              cd ..
              ;;
            "kustomize")
              echo "Processing Kustomize for $env..."
              kustomize build --load-restrictor=LoadRestrictionsNone $env > rendered/$env/all_${env}.yaml
              ;;
            "plain")
              echo "Processing plain YAML files for $env..."
              # Copy all YAML files to rendered directory
              find "$env" -name "*.yaml" -o -name "*.yml" | while read file; do
                filename=$(basename "$file")
                cp "$file" "rendered/$env/$filename"
              done
              ;;
          esac
          
          # Push OCI artifact for this environment
          echo "Pushing OCI artifact for $env..."
          digest_url=$(flux push artifact \
            oci://${ACR_NAME}.azurecr.io/${APP_NAME}/gitops_${env}:latest \
              --source="$(git config --get remote.origin.url)" \
              --revision="$(git branch --show-current)@sha1:$(git rev-parse HEAD)" \
              --path=rendered/$env \
              --output json | \
              jq -r '. | .repository + "@" + .digest')
          digests+="$digest_url "  
          
          echo "Completed processing $env"
        done

        cosign sign --yes $digests
